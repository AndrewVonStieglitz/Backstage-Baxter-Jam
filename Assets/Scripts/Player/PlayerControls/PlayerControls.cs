//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Player/PlayerControls/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Baxter"",
            ""id"": ""714e703b-b9df-405f-862e-9ffe24cf4968"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""e5d42dba-7f98-40cd-a23f-bda04a026fce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""8ea62459-ba39-4d1f-a984-dc46b40f30df"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PickupRelease"",
                    ""type"": ""Button"",
                    ""id"": ""a11db024-8bce-4674-8914-b26fdadc9a9c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2c4cc06d-1a16-4db5-aaa1-2227897e6fe9"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""movementAxis"",
                    ""id"": ""a4ddf32c-cf32-42d4-90e7-a45b9d55c653"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""0cff4032-e343-45ba-892f-dc39ac1c15fb"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""1ce27ad7-43bd-4cc4-b7b2-b04031dec217"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f4ed32a4-e965-44e2-baef-2185257c98ba"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PickupRelease"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Baxter
        m_Baxter = asset.FindActionMap("Baxter", throwIfNotFound: true);
        m_Baxter_Jump = m_Baxter.FindAction("Jump", throwIfNotFound: true);
        m_Baxter_Move = m_Baxter.FindAction("Move", throwIfNotFound: true);
        m_Baxter_PickupRelease = m_Baxter.FindAction("PickupRelease", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Baxter
    private readonly InputActionMap m_Baxter;
    private IBaxterActions m_BaxterActionsCallbackInterface;
    private readonly InputAction m_Baxter_Jump;
    private readonly InputAction m_Baxter_Move;
    private readonly InputAction m_Baxter_PickupRelease;
    public struct BaxterActions
    {
        private @PlayerControls m_Wrapper;
        public BaxterActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_Baxter_Jump;
        public InputAction @Move => m_Wrapper.m_Baxter_Move;
        public InputAction @PickupRelease => m_Wrapper.m_Baxter_PickupRelease;
        public InputActionMap Get() { return m_Wrapper.m_Baxter; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BaxterActions set) { return set.Get(); }
        public void SetCallbacks(IBaxterActions instance)
        {
            if (m_Wrapper.m_BaxterActionsCallbackInterface != null)
            {
                @Jump.started -= m_Wrapper.m_BaxterActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_BaxterActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_BaxterActionsCallbackInterface.OnJump;
                @Move.started -= m_Wrapper.m_BaxterActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_BaxterActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_BaxterActionsCallbackInterface.OnMove;
                @PickupRelease.started -= m_Wrapper.m_BaxterActionsCallbackInterface.OnPickupRelease;
                @PickupRelease.performed -= m_Wrapper.m_BaxterActionsCallbackInterface.OnPickupRelease;
                @PickupRelease.canceled -= m_Wrapper.m_BaxterActionsCallbackInterface.OnPickupRelease;
            }
            m_Wrapper.m_BaxterActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @PickupRelease.started += instance.OnPickupRelease;
                @PickupRelease.performed += instance.OnPickupRelease;
                @PickupRelease.canceled += instance.OnPickupRelease;
            }
        }
    }
    public BaxterActions @Baxter => new BaxterActions(this);
    public interface IBaxterActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnPickupRelease(InputAction.CallbackContext context);
    }
}
